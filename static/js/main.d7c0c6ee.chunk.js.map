{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.jsx","components/Statistics/Statistics.jsx","components/Section/Section.jsx","components/Notification/Notification.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["FeedbackOptions","options","onLeaveFeedback","className","map","option","type","name","onClick","charAt","toUpperCase","slice","Statistics","good","neutral","bad","total","positivePercentage","Section","title","test","children","Notification","message","App","state","event","setState","prevState","target","randomColor","Math","floor","random","toString","this","countTotalFeedback","Object","keys","countPositiveFeedbackPercentage","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2TAqBeA,EAnBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,qBAAKC,UAAU,kBAAf,SACGF,EAAQG,KAAI,SAAAC,GACX,OACE,wBACEC,KAAK,SAELC,KAAMF,EACNG,QAASN,EAJX,SAMGG,EAAOI,OAAO,GAAGC,cAAgBL,EAAOM,MAAM,IAJ1CN,SCEFO,G,MAXI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,qCACE,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,YCESC,G,MARC,SAAC,GAAoC,IAAD,IAAjCC,aAAiC,MAAzB,CAAEC,WAAuB,EAAfC,EAAe,EAAfA,SACnC,OACE,sBAAKlB,UAAU,UAAf,UACE,6BAAKgB,IACJE,OCEQC,EAPM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OACE,mCACE,4BAAIA,OC+CKC,E,4MA3CbC,MAAQ,CAAEZ,KAAM,EAAGC,QAAS,EAAGC,IAAK,G,EACpCb,gBAAkB,SAAAwB,GAChB,EAAKC,UAAS,SAAAC,GACZ,OAAO,eACJF,EAAMG,OAAOtB,KAAOqB,EAAUF,EAAMG,OAAOtB,MAAQ,O,EAU1DuB,YAAc,iBAAM,IAAMC,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBC,SAAS,K,wDANxE,WACE,OAAOC,KAAKV,MAAMZ,KAAOsB,KAAKV,MAAMX,QAAUqB,KAAKV,MAAMV,M,6CAE3D,WACE,OAAOgB,KAAKC,MAAOG,KAAKV,MAAMZ,KAAOsB,KAAKC,qBAAwB,O,oBAGpE,WACE,MAA+BD,KAAKV,MAA5BZ,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACvB,OACE,gCACE,cAAC,EAAD,CAASI,MAAM,wBAAf,SACE,cAAC,EAAD,CACElB,QAASoC,OAAOC,KAAKH,KAAKV,OAC1BvB,gBAAiBiC,KAAKjC,oBAG1B,cAAC,EAAD,CAASiB,MAAM,aAAf,SACGgB,KAAKC,qBAAuB,EAC3B,cAAC,EAAD,CACEvB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOmB,KAAKC,qBACZnB,mBAAoBkB,KAAKI,oCAG3B,cAAC,EAAD,CAAchB,QAAQ,+B,GApChBiB,IAAMC,WCMTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d7c0c6ee.chunk.js","sourcesContent":["import './FeedbackOptions.scss';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return (\n    <div className=\"FeedbackOptions\">\n      {options.map(option => {\n        return (\n          <button\n            type=\"button\"\n            key={option}\n            name={option}\n            onClick={onLeaveFeedback}\n          >\n            {option.charAt(0).toUpperCase() + option.slice(1)}\n          </button>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default FeedbackOptions;\n","const Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <>\n      <p>Good: {good}</p>\n      <p>Neutral: {neutral}</p>\n      <p>Bad: {bad}</p>\n      <p>Total: {total}</p>\n      <p>Positive feedback: {positivePercentage}%</p>\n    </>\n  );\n};\nexport default Statistics;\n","import './Section.scss';\nconst Section = ({ title = { test }, children }) => {\n  return (\n    <div className=\"Section\">\n      <h2>{title}</h2>\n      {children}\n    </div>\n  );\n};\nexport default Section;\n","const Notification = ({ message }) => {\n  return (\n    <>\n      <p>{message}</p>\n    </>\n  );\n};\nexport default Notification;\n","import React from 'react';\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\nimport './App.scss';\nimport Statistics from './components/Statistics/Statistics';\nimport Section from './components/Section/Section';\nimport Notification from './components/Notification/Notification';\nclass App extends React.Component {\n  state = { good: 0, neutral: 0, bad: 0 };\n  onLeaveFeedback = event => {\n    this.setState(prevState => {\n      return {\n        [event.target.name]: prevState[event.target.name] + 1,\n      };\n    });\n  };\n  countTotalFeedback() {\n    return this.state.good + this.state.neutral + this.state.bad;\n  }\n  countPositiveFeedbackPercentage() {\n    return Math.floor((this.state.good / this.countTotalFeedback()) * 100);\n  }\n  randomColor = () => '#' + Math.floor(Math.random() * 16777215).toString(16);\n  render() {\n    const { good, neutral, bad } = this.state;\n    return (\n      <div>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={Object.keys(this.state)}\n            onLeaveFeedback={this.onLeaveFeedback}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          {this.countTotalFeedback() > 0 ? (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          ) : (\n            <Notification message=\"No feedback given\" />\n          )}\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}